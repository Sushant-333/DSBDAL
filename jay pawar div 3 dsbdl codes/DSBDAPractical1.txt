#Roll No: C33377
#Name: Jay Pawar
#Assignment No: 1

# import all the required libraries
import numpy as np
import pandas as pd
# import matplotlib.pyplot as plt
# from sklearn.preprocessing import MinMaxScaler
# import scipy as sp

# read data from the data set
ds1 = pd.read_csv("Student_performance.csv")

std = { 'Roll_no': [1, 2, 3, 4, 5],
		'Student_name': ['AAA', 'BBB', "CCC", "DDD", "EEE"],
		'Marks': [45, np.nan, 65, np.nan, 80],
		'Gender': ['M', 'F', 'M', 'F', 'F']
	}
ds2 = pd.DataFrame(std)

# ds2 = pd.read_json("json_filename")
# ds3 = pd.read_text("text_filename")
# ds4 = pd.read_excel("xlsx_filename")
# ds5 = pd.read_html("html_filename")
# ds6 = pd.read_xml("xml_filename")


# PERFORM OPERATIONS ON THE DATA FRAME

# print(ds2.head())
#   Roll_no Student_name  Marks Gender
# 0        1          AAA   45.0      M
# 1        2          BBB    NaN      F
# 2        3          CCC   65.0      M
# 3        4          DDD    NaN      F
# 4        5          EEE   80.0      F


# print(ds2.tail())
#  Roll_no Student_name  Marks Gender
# 0        1          AAA   45.0      M
# 1        2          BBB    NaN      F
# 2        3          CCC   65.0      M
# 3        4          DDD    NaN      F
# 4        5          EEE   80.0      F

# print("Shape:", ds2.shape)
# Shape: (5, 4)

# print("Columns:", ds2.columns)
# Columns: Index(['Roll_no', 'Student_name', 'Marks', 'Gender'], dtype='object')

# print("Describe:", ds2.describe())
# Describe:         Roll_no      Marks
# count  5.000000   3.000000
# mean   3.000000  63.333333
# std    1.581139  17.559423
# min    1.000000  45.000000
# 25%    2.000000  55.000000
# 50%    3.000000  65.000000
# 75%    4.000000  72.500000
# max    5.000000  80.000000

# print(ds2.info())
# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 5 entries, 0 to 4
# Data columns (total 4 columns):
#  #   Column        Non-Null Count  Dtype  
# ---  ------        --------------  -----  
#  0   Roll_no       5 non-null      int64  
#  1   Student_name  5 non-null      object 
#  2   Marks         3 non-null      float64
#  3   Gender        5 non-null      object 
# dtypes: float64(1), int64(1), object(2)
# memory usage: 288.0+ bytes
# None

# print("Size:", ds1.size)
# Size: 8160

# print("isna: \n",ds2.isna().sum())
# isna: 
#  Roll_no         0
# Student_name    0
# Marks           2
# Gender          0
# dtype: int64

# print("isnull: \n",ds2.isnull().sum())
# isnull: 
#  Roll_no         0
# Student_name    0
# Marks           2
# Gender          0
# dtype: int64

# print(ds2.isna())
#   Roll_no  Student_name  Marks  Gender
# 0    False         False  False   False
# 1    False         False   True   False
# 2    False         False  False   False
# 3    False         False   True   False
# 4    False         False  False   False

# print(ds2.fillna(ds2['Marks'].mean()))
#  Roll_no Student_name      Marks Gender
# 0        1          AAA  45.000000      M
# 1        2          BBB  63.333333      F
# 2        3          CCC  65.000000      M
# 3        4          DDD  63.333333      F
# 4        5          EEE  80.000000      F

# ds2["Gender"].replace(['M', 'F'],[1,0], inplace=True)
# print(ds2)
# Roll_no Student_name  Marks  Gender
# 0        1          AAA   45.0       1
# 1        2          BBB    NaN       0
# 2        3          CCC   65.0       1
# 3        4          DDD    NaN       0
# 4        5          EEE   80.0       0

# print(ds2['Marks'].interpolate())
# 0    45.0
# 1    55.0
# 2    65.0
# 3    72.5
# 4    80.0
# Name: Marks, dtype: float64

# ds2["Gender"] = ds2['Gender'].astype("category")

# # ds2["Gender"] = ds2["Gender"].cat.codes
# # print(ds2)
#    Roll_no Student_name  Marks  Gender
# 0        1          AAA   45.0       1
# 1        2          BBB    NaN       0
# 2        3          CCC   65.0       1
# 3        4          DDD    NaN       0
# 4        5          EEE   80.0       0

# ds2 = pd.get_dummies(ds2, columns = ['Gender'], prefix = 'sex').head()
# print(ds2)
#  Roll_no Student_name  Marks  sex_F  sex_M
# 0        1          AAA   45.0      0      1
# 1        2          BBB    NaN      1      0
# 2        3          CCC   65.0      0      1
# 3        4          DDD    NaN      1      0
# 4        5          EEE   80.0      1      0


# ds2["Gender"] = ds2["Gender"].map({'M': 1, "F": 0})
# print(ds2)
#    Roll_no Student_name  Marks  Gender
# 0        1          AAA   45.0       1
# 1        2          BBB    NaN       0
# 2        3          CCC   65.0       1
# 3        4          DDD    NaN       0
# 4        5          EEE   80.0       0


# ds2["Gender"] = ds2["Gender"].map({'M': 1, "F": 0}).astype('float')
# print(ds2)
#   Roll_no Student_name  Marks  Gender
# 0        1          AAA   45.0     1.0
# 1        2          BBB    NaN     0.0
# 2        3          CCC   65.0     1.0
# 3        4          DDD    NaN     0.0
# 4        5          EEE   80.0     0.0

# from sklearn.preprocessing import OrdinalEncoder
# oe = OrdinalEncoder()
# ds2[["Gender"]] = oe.fit_transform(ds2[["Gender"]])
# print(ds2)
#   Roll_no Student_name  Marks  Gender
# 0        1          AAA   45.0     1.0
# 1        2          BBB    NaN     0.0
# 2        3          CCC   65.0     1.0
# 3        4          DDD    NaN     0.0
# 4        5          EEE   80.0     0.0

# from sklearn.preprocessing import OneHotEncoder
# ohe = OneHotEncoder()
# ds2["Gender"] = ohe.fit_transform(ds2[["Gender"]])
# print(ds2)
#   Roll_no Student_name  Marks                                             Gender
# 0        1          AAA   45.0    (0, 1)\t1.0\n  (1, 0)\t1.0\n  (2, 1)\t1.0\n ...
# 1        2          BBB    NaN    (0, 1)\t1.0\n  (1, 0)\t1.0\n  (2, 1)\t1.0\n ...
# 2        3          CCC   65.0    (0, 1)\t1.0\n  (1, 0)\t1.0\n  (2, 1)\t1.0\n ...
# 3        4          DDD    NaN    (0, 1)\t1.0\n  (1, 0)\t1.0\n  (2, 1)\t1.0\n ...
# 4        5          EEE   80.0    (0, 1)\t1.0\n  (1, 0)\t1.0\n  (2, 1)\t1.0\n ...

# var=max(ds1["raisedhands"])
# print(var)
# print(ds1["raisedhands"])


# MaxAbsScaler(scales such as the maximum value becomes 1 and others scale accordingly)
# method1
# var = ds1["raisedhands"] / ds1["raisedhands"].abs().max()
# print(var) 

# method2
# from sklearn.preprocessing import MaxAbsScaler
# x = np.array(ds1["raisedhands"]).reshape(-1, 1)
# mas = MaxAbsScaler()
# mas.fit(x)
# transform = mas.transform(ds1[["raisedhands"]])
# print(transform)


#  RobustScaler (scales data as median=0 and IQR=1)
# Method1
# ds2['Marks'] = (ds2['Marks'] - ds2['Marks'].mean()) / (ds2['Marks'].quantile(0.75) - ds2['Marks'].quantile(0.25))
# print("\n Robust Scaling \n\n")
# print(ds2['Marks'])
# 0   -1.047619
# 1         NaN
# 2    0.095238
# 3         NaN
# 4    0.952381
# Name: Marks, dtype: float64

# Method2
# from sklearn.preprocessing import RobustScaler
# x = np.array(ds2['Marks']).reshape(-1 ,1)
# transformer = RobustScaler().fit(x)
# scaled = transformer.transform(x)
# print(scaled)
# [[-1.14285714]
#  [        nan]
#  [ 0.46253743]
#  [        nan]
#  [ 0.85714286]]


# StandarsScaler (scales data as mean=0 and std deviation=1)
# Method1
# ds2['Marks'] = (ds2['Marks'] - ds2['Marks'].mean()) / (ds2['Marks'].std())
# print('\n z score is \n\n')
# print(ds2['Marks'])

# Method2
# from sklearn.preprocessing import StandardScaler
# x = np.array(ds2['Marks']).reshape(-1, 1)
# scaler =StandardScaler()
# scaler.fit(x)
# transformer = scaler.transform(x)
# print(transformer)
# [[-1.27872403]
#  [        nan]
#  [ 0.11624764]
#  [        nan]
#  [ 1.16247639]]


# MinMaxScaler (range 0 to 1)
# # Method1
# ds2['Marks'] = (ds2['Marks'] - ds2['Marks'].min()) / (ds2['Marks'].max() - ds2['Marks'].min())
# print(ds2["Marks"])
# 0    0.000000
# 1         NaN
# 2    0.571429
# 3         NaN
# 4    1.000000
# Name: Marks, dtype: float64

# Method2
# from sklearn.preprocessing import MinMaxScaler
# x = np.array(ds2['Marks']).reshape(-1, 1)
# scaler = MinMaxScaler()
# scaler.fir(x)
# transformer = scaler.transform(x)
# print(transformer)
# [[0.14285714]
#  [        nan]
#  [ 0.69546587]
#  [        nan]
#  [ 0.85714286]